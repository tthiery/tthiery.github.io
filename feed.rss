<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
	<channel>
		<title>Journal</title>
		<link>http://tthiery.github.io/</link>
		<description>Welcome Builders!</description>
		<copyright>2020</copyright>
		<pubDate>Sat, 01 Aug 2020 07:52:08 GMT</pubDate>
		<lastBuildDate>Sat, 01 Aug 2020 07:52:08 GMT</lastBuildDate>
		<item>
			<title>LEGO Powered UP - Motor Modes POS and APOS</title>
			<link>http://tthiery.github.io/posts/2020/08/01/lego-powered-up-motor-modes-pos-and-apos</link>
			<description>&lt;p&gt;The LEGO Control+ motors - Technic XLarge Linear Motor and Technic Large Linear Motor - have internally the modes &lt;code&gt;POS&lt;/code&gt; (reporting a position) and &lt;code&gt;APOS&lt;/code&gt; (reporting an absolute position). Further does the LEGO Wireless Protocol specify methods &lt;a href="https://lego.github.io/lego-ble-wireless-protocol-docs/index.html#output-sub-command-startspeedfordegrees-degrees-speed-maxpower-endstate-useprofile-0x0b"&gt;&lt;code&gt;StartSpeedForDegrees&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://lego.github.io/lego-ble-wireless-protocol-docs/index.html#output-sub-command-gotoabsoluteposition-abspos-speed-maxpower-endstate-useprofile-0x0d"&gt;&lt;code&gt;GotoAbsolutePosition&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;</description>
			<guid>http://tthiery.github.io/posts/2020/08/01/lego-powered-up-motor-modes-pos-and-apos</guid>
			<pubDate>Sat, 01 Aug 2020 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;The LEGO Control+ motors - Technic XLarge Linear Motor and Technic Large Linear Motor - have internally the modes &lt;code&gt;POS&lt;/code&gt; (reporting a position) and &lt;code&gt;APOS&lt;/code&gt; (reporting an absolute position). Further does the LEGO Wireless Protocol specify methods &lt;a href="https://lego.github.io/lego-ble-wireless-protocol-docs/index.html#output-sub-command-startspeedfordegrees-degrees-speed-maxpower-endstate-useprofile-0x0b"&gt;&lt;code&gt;StartSpeedForDegrees&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://lego.github.io/lego-ble-wireless-protocol-docs/index.html#output-sub-command-gotoabsoluteposition-abspos-speed-maxpower-endstate-useprofile-0x0d"&gt;&lt;code&gt;GotoAbsolutePosition&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;: &lt;code&gt;GotoAbsolutePosition&lt;/code&gt; does not orient itself on &lt;code&gt;APOS&lt;/code&gt;. It is aligned with &lt;code&gt;POS&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;And to put it in context, a memorable quote:&lt;/p&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;There are only two hard things in Computer Science: cache invalidation and naming things.&lt;/p&gt;
&lt;p&gt;-- Phil Karlton&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="the-modes"&gt;The Modes&lt;/h3&gt;
&lt;p&gt;Let us start with the simple mode: &lt;code&gt;APOS&lt;/code&gt; is the absolute position in degrees measured from a zero point. It goes from 0, 1 .. 179, 180 then to -180, -179, .., -1, 0. Simple, straight forward. For the current Control+ motors the zero point is physically not marked.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;POS&lt;/code&gt; on the other hand is more complicated. The value 0 is aligned with the position of the motor was when the device was activated (most likely: put under power). From that moment on, it counts the degrees moved away from that position. And that number can get quite high (it is a &lt;code&gt;Int32&lt;/code&gt;) and exceeds the traditional 0-360 degree range.&lt;/p&gt;
&lt;p&gt;An example&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Motor is put under power: &lt;code&gt;POS: 0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Motor is moved by 30 degrees: &lt;code&gt;POS: 30&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Motor is moved by -70 degrees: &lt;code&gt;POS: -40&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Motor is further moved by two full turns (aka. -720 degrees) : &lt;code&gt;POS: -760&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="output-commands"&gt;Output Commands&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://lego.github.io/lego-ble-wireless-protocol-docs/index.html#output-sub-command-startspeedfordegrees-degrees-speed-maxpower-endstate-useprofile-0x0b"&gt;&lt;code&gt;StartSpeedForDegrees&lt;/code&gt;&lt;/a&gt; moves the motor by the amount of degrees &lt;strong&gt;relative&lt;/strong&gt; to the current position. If the motor is at &lt;code&gt;POS: 20&lt;/code&gt; and the command is invoked with 5 degrees the motor is afterwards in &lt;code&gt;POS: 25&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://lego.github.io/lego-ble-wireless-protocol-docs/index.html#output-sub-command-gotoabsoluteposition-abspos-speed-maxpower-endstate-useprofile-0x0d"&gt;&lt;code&gt;GotoAbsolutePosition&lt;/code&gt;&lt;/a&gt; moves the motor to a given &lt;strong&gt;absolute&lt;/strong&gt; position &lt;strong&gt;within the range of &lt;code&gt;POS&lt;/code&gt;&lt;/strong&gt;. An example: If the position is &lt;code&gt;POS: -760&lt;/code&gt; and command is invoked with -40 the motor will make &lt;em&gt;&lt;strong&gt;two full turns&lt;/strong&gt;&lt;/em&gt; and is &lt;em&gt;&lt;strong&gt;not oriented&lt;/strong&gt;&lt;/em&gt; 40 degrees of the physical zero but -40 degrees of the initial position of the motor. Consequently it takes an &lt;code&gt;Int32&lt;/code&gt; as a parameter.&lt;/p&gt;
&lt;p&gt;These &lt;strong&gt;two unexpected behaviors&lt;/strong&gt; are traps when programming against the LEGO Wireless Protocol / Powered UP. They are a horrible user experience in regards to their naming (developer perspective). &lt;strong&gt;However, they are the correct interface and the right thing to do&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note&lt;/strong&gt;: This reflection is based on the Technic Control+ L/XL Linear Motors. There might be a different handling with different motors. I will update the post if I become aware of a difference.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="adjust-the-mental-model"&gt;Adjust the mental model&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;For most use cases, an (physical) absolute position (&lt;code&gt;APOS&lt;/code&gt;) is useless. A Technic axle can be connected in 3 wrong offsets compared to the pyhsical zero point of the motor (remember: unmarked). Even more interesting for gears.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GotoAbsolutePosition&lt;/code&gt; should be (mentally and in SDKs) named &lt;code&gt;GotoPosition&lt;/code&gt; to better reflect the fact that it is aligned with the &lt;code&gt;POS&lt;/code&gt; range and not the &lt;code&gt;APOS&lt;/code&gt; range.
&lt;ul&gt;
&lt;li&gt;The two full turns can then easily be explained as the amount of degrees as a delta between the current pos and the targeted position the motor should go-to.&lt;/li&gt;
&lt;li&gt;The 40 degrees of the original motor position are also now okay, because that aligns with the understanding of &lt;code&gt;POS&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note&lt;/strong&gt;: As an alternative: Maybe &lt;code&gt;APOS&lt;/code&gt; is wrongly named 😀. Or maybe we just need a proper documentation.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="practical-usage-reset-zero"&gt;Practical Usage: Reset Zero&lt;/h3&gt;
&lt;p&gt;Assume a Technic Model with a steering. Magically it was calibrated to the center of your steer. The motor is at &lt;code&gt;POS: 254&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The question here is: What use does &lt;code&gt;GotoAbsolutePosition&lt;/code&gt; bring? Well, there is the method &lt;code&gt;PresetEncoder&lt;/code&gt;. It resets &lt;code&gt;POS&lt;/code&gt; to zero. Applied here, &lt;code&gt;GotoAbsolutePosition&lt;/code&gt; can now comfortable control the steering around the middle position (0) without doing complicated math otherwise needed when using &lt;code&gt;StartSpeedForDegrees&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id="conclusions"&gt;Conclusions&lt;/h3&gt;
&lt;p&gt;Naming is hard. Documentation is sometimes a good idea.&lt;/p&gt;
&lt;h3 id="appendix-users-of-sharpbrick.poweredup"&gt;Appendix: Users of SharpBrick.PoweredUp&lt;/h3&gt;
&lt;p&gt;The mentioned modes and commands are exposed using the following methods:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;POS&lt;/code&gt; =&amp;gt; &lt;code&gt;TachoMotor.PositionObservable&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;APOS&lt;/code&gt; =&amp;gt; &lt;code&gt;AbsoluteMotor.AbsolutePositionObservable&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;StartSpeedForDegrees&lt;/code&gt; =&amp;gt; &lt;code&gt;TachoMotor.StartSpeedForDegreesAsync&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GotoAbsolutePosition&lt;/code&gt; =&amp;gt; &lt;code&gt;AbsoluteMotor.GotoAbsolutePositionAsync&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PresetEncoder&lt;/code&gt; =&amp;gt; &lt;code&gt;TachoMotor.SetZeroAsync&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There might be a change coming which &lt;a href="https://github.com/sharpbrick/powered-up/issues/74"&gt;renames&lt;/a&gt; and &lt;a href="https://github.com/sharpbrick/powered-up/issues/75"&gt;moves&lt;/a&gt; &lt;code&gt;GotoAbsolutePosition&lt;/code&gt;.&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>xUnit Theories with Type Parameters</title>
			<link>http://tthiery.github.io/posts/2020/07/01/xunit-with-generic-paramter</link>
			<description>&lt;p&gt;When unit testing generic protocols like the &lt;a href="https://lego.github.io/lego-ble-wireless-protocol-docs"&gt;Lego Wireless Protocol&lt;/a&gt; input values might be lead to different expected values. Sometimes, however, not only the value changes but also the data types of what to expect. xUnit's &lt;code&gt;Assert.Equal(expected, actual)&lt;/code&gt; methods has overloads for countless basic data types like &lt;code&gt;short&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;, &lt;code&gt;bool&lt;/code&gt; and elementary support for enums. To activate these, the expected argument would need to be parameterized with the right data type.&lt;/p&gt;</description>
			<guid>http://tthiery.github.io/posts/2020/07/01/xunit-with-generic-paramter</guid>
			<pubDate>Wed, 01 Jul 2020 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;When unit testing generic protocols like the &lt;a href="https://lego.github.io/lego-ble-wireless-protocol-docs"&gt;Lego Wireless Protocol&lt;/a&gt; input values might be lead to different expected values. Sometimes, however, not only the value changes but also the data types of what to expect. xUnit's &lt;code&gt;Assert.Equal(expected, actual)&lt;/code&gt; methods has overloads for countless basic data types like &lt;code&gt;short&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;, &lt;code&gt;bool&lt;/code&gt; and elementary support for enums. To activate these, the expected argument would need to be parameterized with the right data type.&lt;/p&gt;
&lt;p&gt;While this works quite nice when using fixed unit tests where the actual/expected data type is part of the method, for xUnit &lt;strong&gt;theories&lt;/strong&gt; it need some more infrastructure in form of adding a type parameter to the unit test method.&lt;/p&gt;
&lt;p&gt;Here an extract from the unit testing from the &lt;a href="https://github.com/sharpbrick/powered-up"&gt;sharpbrick/powered-up&lt;/a&gt; library.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;[Theory]
[InlineData(&amp;quot;06-00-01-02-06-00&amp;quot;, HubProperty.Button, HubPropertyOperation.Update, false)]
[InlineData(&amp;quot;06-00-01-02-06-01&amp;quot;, HubProperty.Button, HubPropertyOperation.Update, true)]
[InlineData(&amp;quot;06-00-01-05-06-61&amp;quot;, HubProperty.Rssi, HubPropertyOperation.Update, (sbyte)97)]
[InlineData(&amp;quot;06-00-01-06-06-64&amp;quot;, HubProperty.BatteryVoltage, HubPropertyOperation.Update, (byte)100)]
[InlineData(&amp;quot;06-00-01-07-06-00&amp;quot;, HubProperty.BatteryType, HubPropertyOperation.Update, BatteryType.Normal)]
[InlineData(&amp;quot;06-00-01-07-06-01&amp;quot;, HubProperty.BatteryType, HubPropertyOperation.Update, BatteryType.RechargeableBlock)]
[InlineData(&amp;quot;06-00-01-0B-06-80&amp;quot;, HubProperty.SystemTypeId, HubPropertyOperation.Update, SystemType.LegoTechnic_MediumHub)]
[InlineData(&amp;quot;06-00-01-0C-06-00&amp;quot;, HubProperty.HardwareNetworkId, HubPropertyOperation.Update, (byte)0)]
public void HubPropertiesEncoder_Decode_UpdateUpstream&amp;lt;T&amp;gt;(string messageAsString, HubProperty expectedProperty, HubPropertyOperation expectedPropertyOperation, T payload)
{
    // arrange
    var data = BytesStringUtil.StringToData(messageAsString).AsSpan().Slice(3);

    // act
    var message = new HubPropertiesEncoder().Decode(0x00, data) as HubPropertyMessage&amp;lt;T&amp;gt;;

    // assert
    Assert.Equal(expectedProperty, message.Property);
    Assert.Equal(expectedPropertyOperation, message.Operation);
    Assert.Equal(payload, message.Payload);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;payload&lt;/code&gt; parameter has a data type bound to a generic. When invoking the &lt;code&gt;[Theory]&lt;/code&gt; xUnit will actually instanciate the function with the suitable type parameter. As above, sometimes the &lt;code&gt;[InlineData(...)]&lt;/code&gt; entry needs to be hinted (e.g. &lt;code&gt;(sbyte)97&lt;/code&gt;), when C# defaults might lead to a wrong data type (e.g. &lt;code&gt;97&lt;/code&gt; is of data type &lt;code&gt;int&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;When the &lt;code&gt;Attribute&lt;/code&gt;s of C# do not allow to instantiate a data type (typically classes), a adapter shim might help:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;[Theory]
[InlineData(&amp;quot;09-00-01-03-06-00-00-00-11&amp;quot;, HubProperty.FwVersion, HubPropertyOperation.Update, &amp;quot;1.1.0.0&amp;quot;)]
[InlineData(&amp;quot;09-00-01-04-06-00-00-00-07&amp;quot;, HubProperty.HwVersion, HubPropertyOperation.Update, &amp;quot;0.7.0.0&amp;quot;)]
[InlineData(&amp;quot;07-00-01-0A-06-00-03&amp;quot;, HubProperty.LegoWirelessProtocolVersion, HubPropertyOperation.Update, &amp;quot;3.0&amp;quot;)]
public void HubPropertiesEncoder_Decode_UpdateUpstream_VersionShim(string messageAsString, HubProperty expectedProperty, HubPropertyOperation expectedPropertyOperation, string payload)
    =&amp;gt; HubPropertiesEncoder_Decode_UpdateUpstream(messageAsString, expectedProperty, expectedPropertyOperation, new Version(payload));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; I google. This feature was surely somewhere mentioned before. I do not reference the material I googled, because I lost the link.&lt;/em&gt;&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>ReactiveX Middlewares</title>
			<link>http://tthiery.github.io/posts/2020/06/12/reactivex-middlewares</link>
			<description>&lt;p&gt;While implementing &lt;a href="https://github.com/sharpbrick/powered-up"&gt;sharpbrick/powered-up&lt;/a&gt; an interesting problem came up to solve: How to handle the incoming messages of the Bluetooth Low Energy based communication protocol. On top of the Bluetooth abstraction there is a simple callback which would receive roughly 50 different message types which would need dispatching to several locations, some locations would even spawn up dynamically over time. I needed an infrastructure! I needed a middleware 😀.&lt;/p&gt;</description>
			<guid>http://tthiery.github.io/posts/2020/06/12/reactivex-middlewares</guid>
			<pubDate>Fri, 12 Jun 2020 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;While implementing &lt;a href="https://github.com/sharpbrick/powered-up"&gt;sharpbrick/powered-up&lt;/a&gt; an interesting problem came up to solve: How to handle the incoming messages of the Bluetooth Low Energy based communication protocol. On top of the Bluetooth abstraction there is a simple callback which would receive roughly 50 different message types which would need dispatching to several locations, some locations would even spawn up dynamically over time. I needed an infrastructure! I needed a middleware 😀.&lt;/p&gt;
&lt;h2 id="possible-solutions"&gt;Possible Solutions&lt;/h2&gt;
&lt;p&gt;Within the tighter .NET ecosystem (a.k.a. everything what Microsoft and close friends throw at us) there are the following libraries for push based messaging:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;System.Reactive&lt;/code&gt;&lt;/strong&gt;: The .NET implementation part (and godfather) of the ReactiveX project (e.g. JavaScript: &lt;code&gt;rxjs&lt;/code&gt;). The library is push-based, threading/buffering is optional, allow optional subscription, supports LINQ, allow building dynamic pipelines but is heap based.&lt;/li&gt;
&lt;li&gt;ASP.NET Core &lt;strong&gt;middleware&lt;/strong&gt; stack. Unfortunately, in the current state bound to HTTP. Standalone implementations like &lt;a href="https://github.com/violetgrass/middleware"&gt;violetgrass/middleware&lt;/a&gt; (disclaimer: another side project) make the basic concept available to other server/dispatcher applications.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;System.Threading.Channels&lt;/code&gt;: A part of the ASP.NET Core stack, focused on channeling data between separate producer and consumer threads. The library is push- and pull-based, buffering is including, requires active consumers and does not support LINQ.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="middlewares"&gt;Middlewares&lt;/h2&gt;
&lt;p&gt;Ignoring &lt;code&gt;System.Threading.Channels&lt;/code&gt; for now, both &lt;code&gt;System.Reactive&lt;/code&gt; and ASP.NET Core compiled middlewares are basically methods to build a series of functions between the place of source and an ultimate target&lt;/p&gt;
&lt;p&gt;A compiled middleware is build upfront and is optimized on efficiency&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class QueueMessageContext : Context
{
    public Message Message { get; set; }
}

var stack = new MiddlewareBuilder&amp;lt;QueueMessageContext&amp;gt;()
    // middleware step
    .Use(async (context, next) =&amp;gt; {
        // do something with the context.Message
        await next(context); 
    })
    // middleware step
    .Use(async (context, next) =&amp;gt; {
        // do something with the context.Message
        await next(context); 
    })
    // final handling of message
    .Use(async (context, next) =&amp;gt; {
        // do something with the context.Message
    })
    .Build();

// invoke
var x = new QueueMessageContext() { Message = msg, };

await stack(x); // the whole stack is essentially a stacked function delegate. no magic anymore. no overhead despite millions of requests.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using &lt;code&gt;System.Reactive&lt;/code&gt; middlewares can be dynamically constructed&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var source = new Subject&amp;lt;Message&amp;gt;();

var firstPart = source
    .Select(msg =&amp;gt; { /* do something */ return msg; }); // middleware step

// somewhere else (e.g. on demand)
var d = firstPart
    .Select(msg =&amp;gt; { /* do something */ return msg; }) // middleware step
    .Subscribe(msg =&amp;gt; /* do something */); // final handling of message

// invoke
source.next(msg); // subscriptions are checked, data is boxed, heap is allocated, ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While a compiled middleware has the benefits of performance, a reactive stream can be dynamically composed, filtered and combined (like known from LINQ). It also allows multiple subscriptions which an ASP.NET Core middleware does not. However, there is also a disadvantage: It does not support async/await and will block the producer (exept explictely configured with &lt;code&gt;.ObserveOn&lt;/code&gt;). It does not naturally fit to the common &lt;code&gt;async/await&lt;/code&gt; programming pattern in C#.&lt;/p&gt;
&lt;p&gt;Within &lt;a href="https://github.com/sharpbrick/powered-up"&gt;sharpbrick/powered-up&lt;/a&gt; there is a critical requirement to dynamically compose pipelines of the incoming upstream messages to models representing PoweredUP hubs and devices.&lt;/p&gt;
&lt;blockquote class="blockquote"&gt;
&lt;p&gt;&lt;code&gt;System.Reactive&lt;/code&gt; is therefore the right choice to use within the library. The library behaves similar to a user interface (PoweredUP devices &amp;lt;-&amp;gt; UI controls) with external influences. In the world of UI progamming, the reactive programming model is used by all currently popular frameworks  (React (Native), Angular, ...).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For consumers of the library however, the &lt;code&gt;SharpBrick.PoweredUp&lt;/code&gt; library exposes an async/await based interface for invocations. Internally, the library converts the subscriptions to the reactive stream into an &lt;em&gt;awaiter&lt;/em&gt; using &lt;code&gt;.GetAwaiter()&lt;/code&gt; as seen below in a request/response matching algorithm:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public static async Task&amp;lt;TResultMessage&amp;gt; SendMessageReceiveResultAsync&amp;lt;TResultMessage&amp;gt;(this IPoweredUpProtocol self, PoweredUpMessage requestMessage, Func&amp;lt;TResultMessage, bool&amp;gt; filter = default)
{
    // UpstreamMessages is an IObservable
    var awaitable = self.UpstreamMessages
        .OfType&amp;lt;TResultMessage&amp;gt;()
        .Where(responseMessage =&amp;gt; filter == null || filter(responseMessage))
        .FirstAsync() // only the first message observed is forwarded
        .GetAwaiter(); // make sure the subscription is present at the moment the message is sent.

    await self.SendMessageAsync(requestMessage);

    var response = await awaitable; // subscription is discarded

    return response;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;When building an application or a library with many variable exit points - may it be UI controls or other model endpoints - for an incoming data stream, using &lt;code&gt;System.Reactive&lt;/code&gt; is the right choice.&lt;/p&gt;
</content:encoded>
		</item>
		<item>
			<title>Using PlatformIO and Git</title>
			<link>http://tthiery.github.io/posts/2020/05/21/platformio-with-git</link>
			<description>&lt;p&gt;When working on my private PlatformIO project for a watertank sensor, I repeatingly struggled with how to manage the source code. PlatformIO is unfortunately not very clear explaining this topic.&lt;/p&gt;</description>
			<guid>http://tthiery.github.io/posts/2020/05/21/platformio-with-git</guid>
			<pubDate>Thu, 21 May 2020 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;When working on my private PlatformIO project for a watertank sensor, I repeatingly struggled with how to manage the source code. PlatformIO is unfortunately not very clear explaining this topic.&lt;/p&gt;
&lt;p&gt;Simplified, the &lt;code&gt;platform.ini&lt;/code&gt; contains references to the utilized SDKs and library dependencies. The only PlatformIO artifact are the &lt;code&gt;platform.ini&lt;/code&gt; and the entry in the &lt;code&gt;extensions.json&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.gitignore&lt;/code&gt; however, will have to contain some entries to avoid commiting the cached PlatformIO is using in form of &lt;code&gt;.pio&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="file-to-add-to-source-control"&gt;File to add to source control&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;.vscode
&lt;ul&gt;
&lt;li&gt;extensions.json&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;src/* (your source code)&lt;/li&gt;
&lt;li&gt;headers/* (your header)&lt;/li&gt;
&lt;li&gt;platform.ini&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="files-in.gitignore"&gt;Files in &lt;code&gt;.gitignore&lt;/code&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;.pio (excluding all the cached libraries and board files)&lt;/li&gt;
&lt;li&gt;.vscode/c_cpp_properties.json (cache over all C artifacts)&lt;/li&gt;
&lt;li&gt;.vscode/launch.json (hardcoded to local directory by default)&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
		</item>
		<item>
			<title>First Post</title>
			<link>http://tthiery.github.io/posts/2019/01/23/first-post</link>
			<description>&lt;p&gt;This is my first post!&lt;/p&gt;</description>
			<guid>http://tthiery.github.io/posts/2019/01/23/first-post</guid>
			<pubDate>Wed, 23 Jan 2019 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;This is my first post!&lt;/p&gt;
&lt;script src="https://gist.github.com/tthiery/2426b191135b4403c5f305727366cecf.js?file=Bar.cs"&gt;&lt;/script&gt;
</content:encoded>
		</item>
	</channel>
</rss>